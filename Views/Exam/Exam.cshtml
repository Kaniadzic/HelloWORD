@{
    ViewBag.Title = "Exam";
}

<main class="mb-5">
    <section class="d-flex align-items-center justify-content-between exam-top-panel mb-3">
        <div class="ml-md-5 exam-top-text">
            Kategoria: <span class="mr-3 HelloWORD" id="examCategory">@ViewBag.Category</span>
            Wartość punktowa: <span class="mr-3" id="examScore">X</span>
            Czas do końca: <span class="mr-3" id="examTime">25:00</span>
        </div>
        <div class="mr-md-5">
            @Html.ActionLink("Zakończ", "ExamResult", "Exam",  new { @class = "btn btn-danger", id = "examEnd" })
        </div>
    </section>
    <section class="d-md-flex align-items-start justify-content-center">
        <div class="d-flex flex-column justify-content-around mr-3">
            <div class="exam-media d-flex align-items-center justify-content-center">
                <img src="~/Content/images/wait.jpg" alt="To pytanie nie ma obrazka" class="exam-picture">
            </div>
            <div class="exam-question my-3 p-2">
                Trwa ładowanie pytania...
            </div>
            <div class="exam-answers d-flex justify-content-start flex-column">
                <label class="p-2 quiz-answer d-flex align-items-center justify-content-start">
                    <input type="radio" name="exam-answer-traffic" class="d-flex align-items-center" value="TAK" id="AnswerYes">
                    TAK
                </label>
                <label class="p-2 quiz-answer d-flex align-items-center justify-content-start">
                    <input type="radio" name="exam-answer-traffic" class="d-flex align-items-center" value="NIE" id="AnswerNo">
                    NIE
                </label>
            </div>
        </div>

        <div class="d-flex flex-column exam-info-panel align-items-center justify-content-center mt-5 ml-3">
            <p class="h5">Postęp części podstawowej: <span id="trafficProgress">0</span>/20</p>
            <p class="h5">Postęp części specjalistycznej: <span id="categorizedProgress">0</span>/12</p>

            <p id="questionTimerText" class="mt-5">Czas na zapoznanie się z pytaniem</p>
            <div class="loadbar d-flex justify-content-start">
                <div id="loadbarProgress"></div>
                <div id="loadbarText">XX</div>
            </div>

            <div class="d-flex mt-5">
                <button class="btn btn-warning mr-4" id="buttonStart" disabled>START</button>
                <button class="btn btn-success ml-4" id="buttonNext" disabled>DALEJ</button>
            </div>
        </div>
    </section>
</main>

<script type="text/javascript" src="~/Scripts/jquery-3.4.1.min.js"></script>

<script>
    window.onload = addAlerts;

    // dodanie akcji wyjścia do przycisku zakończ
    function addLeaveActionToButtonEnd() {
        let examEnd = document.getElementById('examEnd');
        examEnd.addEventListener('click', finalizeExam);
    }

    // alerty po kliknięciu
    function addAlerts() {
        let menu = document.getElementsByClassName('nav-item');

        for(let i = 0; i < menu.length; i++) {
            menu[i].addEventListener('click', function (event) { leaveAlert('Ta akcja spowoduje porzucenie egzaminu! Czy chcesz kontynuować?') });
        }

        let examEnd = document.getElementById('examEnd');
        examEnd.addEventListener('click', function (event) { leaveAlert('Ta akcja spowoduje zakończenie egzaminu! Czy chcesz kontynuować?') });
    }

    function leaveAlert(message) {
        if (!window.confirm(message)) {
            event.preventDefault();
        }
    }

    // główny licznik czasu
    let mainTime = 1500;
    let examTime = document.getElementById('examTime');
    let mainTimeFunction;
    
    function mainTimer() {
        mainTime -= 1;

        if (mainTime < 0) {
            finalizeExam();
        }
        else {
            examTime.innerText = Math.floor(mainTime / 60).toString() + ':' + (mainTime % 60).toString();

            mainTimeFunction = setTimeout(mainTimer, 1000);
        }
    }

    // zmiana długości paska czasu
    let loadbarProgress = document.getElementById('loadbarProgress');
    let loadBarWidth = 100;
    function changeTimeBarWidth(loadBarWidth) {
        loadbarProgress.style.width = loadBarWidth.toString() + "%";
    }

    function resetLoadbar() {
        loadBarWidth = 100;
        changeTimeBarWidth(loadBarWidth);
    }

    // licznik czasu dla pytań
    let readTimeTraffic = 20;
    let readTimeCategorized = 50;
    let answerTime = 15;
    let timeFunction;
    let loadbarText = document.getElementById('loadbarText');
    let questionTimerText = document.getElementById('questionTimerText');

    function questionTimer() {
        questionTimerText.innerText = "Czas na zapoznanie się z pytaniem";

        if (categorizedQuestionCounter == 0) {
            timerTraffic();
        }
        else if (categorizedQuestionCounter != 0) {
            timerCategorized();
        }
    }

    function timerTraffic() {
        loadbarText.innerText = readTimeTraffic;  
        loadBarWidth -= 5;
        changeTimeBarWidth(loadBarWidth);

        readTimeTraffic -= 1;

        if (readTimeTraffic == -1) {
            timerAnswer();
        }
        else {
            timeFunction = setTimeout(questionTimer, 1000);
        }
    }

    function timerCategorized() {
        loadbarText.innerText = readTimeCategorized;
        loadBarWidth -= 2;
        changeTimeBarWidth(loadBarWidth);

        readTimeCategorized -= 1;

        if (readTimeCategorized == -1) {
            timerAnswer();
        }
        else {
            timeFunction = setTimeout(questionTimer, 1000);
        }
    }

    function timerAnswer() {
        loadbarText.innerText = answerTime;
        loadBarWidth -= 6.66;
        changeTimeBarWidth(loadBarWidth);

        if (answerTime == 15) {
            questionTimerText.innerText = "Czas na udzielenie odpowiedzi";
            resetLoadbar();
        }

        answerTime -= 1;

        if (answerTime == -1) {
            saveAnswer();
            nextStage();
        }
        else {
            timeFunction = setTimeout(timerAnswer, 1000);
        }
    }

    function resetTimer() {
        clearTimeout(timeFunction);
        readTimeTraffic = 20;
        readTimeCategorized = 50;
        answerTime = 15;
    }

    

    // zmienne z pytaniami(array) i kategorią
    let trafficQuestions;
    let categorizedQuestions;
    let category = '@ViewBag.Category';

    // zmienne do śledzenia stanu egzaminu
    let trafficQuestionCounter = 0;
    let categorizedQuestionCounter = 0;

    // tablica zapisująca odpowiedzi
    let userAnswers = [];
    let answersCount = 0;
    let questionNumber;

    // pobranie list z pytaniami i start egzaminu
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GenerateTrafficQuestions")',
            cache: false,
            dataType: "JSON",
            success: function (data) {
                initializeTrafficQuestions(data);
            }
        });

        $.ajax({
            url: '@Url.Action("GenerateCategorizedQuestions")',
            cache: false,
            dataType: "JSON",
            data: { category: category },
            success: function (data) {
                initializeCategorizedQuestions(data);
            }
        });

        // TODO: normalny async i await
        setTimeout(() => { startExam(); }, 2000);

        return false;
    });

    // załadowanie listy z pytaniami ogólnymi
    function initializeTrafficQuestions(data) {
        trafficQuestions = data;
    }

    // załadowanie listy z pytaniami specjalnymi
    function initializeCategorizedQuestions(data) {
        categorizedQuestions = data;
    }

    function startExam() {
        let buttonStart = document.getElementById('buttonStart');
        buttonStart.disabled = false;

        addLeaveActionToButtonEnd();
        mainTimer();
        addNextButtonListener();
        nextStage();
    }

    // sprawdzenie które pytanie ładujemy
    function nextStage() {
        resetLoadbar();
        resetTimer();
        questionTimer();

        if (trafficQuestionCounter == 20) {
            changeAnswersButtons();
        }

        if (categorizedQuestionCounter == 12) {
            finalizeExam();

            return false;
        }

        if (trafficQuestionCounter < 20) {
            loadQuestion(trafficQuestions[trafficQuestionCounter], false);
            trafficQuestionCounter += 1;

            let trafficProgress = document.getElementById('trafficProgress');
            trafficProgress.innerText = trafficQuestionCounter;
        }
        else {
            let categorizedProgress = document.getElementById('categorizedProgress');
            categorizedProgress.innerText = categorizedQuestionCounter + 1;

            loadQuestion(categorizedQuestions[categorizedQuestionCounter], true);
            categorizedQuestionCounter += 1;
        }
    }

    // załadowanie pytania (pierwszego lub kolejnego)
    function loadQuestion(data, categorized) {
        disableNextButton();
        questionNumber = data.Number;

        let question = document.querySelector('.exam-question');
        question.innerText = data.Question;

        let examScore = document.getElementById('examScore');
        examScore.innerText = data.Score;

        let examPicture = document.querySelector('.exam-picture');
        examPicture.src = data.MediaPath;

        if (categorized) {
            let answerA = document.getElementById('LabelAnswerA');
            let answerB = document.getElementById('LabelAnswerB');
            let answerC = document.getElementById('LabelAnswerC');

            answerA.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="A" id="AnswerA">' + data.AnswerA;
            answerB.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="B" id="AnswerB">' + data.AnswerB;
            answerC.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="C" id="AnswerC">' + data.AnswerC;
        }
    }

    // usunięcie odpowiedzi tak/nie i zastąpienie ich trzema polami na odpowiedzi
    function changeAnswersButtons() {
        let examAnswers = document.querySelector('.exam-answers');
        examAnswers.innerHTML = null;

        answerA = document.createElement("label");
        answerA.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerA.id = "LabelAnswerA";
        answerA.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="A" id="AnswerA">';

        answerB = document.createElement("label");
        answerB.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerB.id = "LabelAnswerB";
        answerB.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="B" id="AnswerB">';

        answerC = document.createElement("label");
        answerC.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerC.id = "LabelAnswerC";
        answerC.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="C" id="AnswerC">';

        examAnswers.appendChild(answerA);
        examAnswers.appendChild(answerB);
        examAnswers.appendChild(answerC);
    }

    // dodanie akcji do przycisku "dalej"
    function addNextButtonListener() {
        let buttonNext = document.getElementById('buttonNext');
        buttonNext.addEventListener('click', saveAnswer);
        buttonNext.addEventListener('click', nextStage);
    }

    // zapisanie odpowiedzi po kliknięciu "dalej"
    function saveAnswer() {
        let answerYes = document.getElementById("AnswerYes");
        let answerNo = document.getElementById("AnswerNo");

        if (answerYes != null && answerNo != null) {
            if (answerYes.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: "yes" };
                answerYes.checked = false;
            }
            else if (answerNo.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: "no" };
                answerNo.checked = false;
            }
            else {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: null };
            }
        }
        else {
            let answerA = document.getElementById('AnswerA');
            let answerB = document.getElementById('AnswerB');
            let answerC = document.getElementById('AnswerC');

            if (answerA.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "A" };
            }
            else if (answerB.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "B" };
            }
            else if (answerC.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "C" };
            }
            else {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: null };
            }
        }    

        answersCount += 1;
    }

    // zarządzanie buttonami
    function disableNextButton() {
        let buttonNext = document.getElementById('buttonNext');
        buttonNext.disabled = true;

        let buttonStart = document.getElementById('buttonStart');
        buttonStart.addEventListener('click', enableButtonNext); 
    }

    function enableButtonNext() {
        let buttonNext = document.getElementById('buttonNext');
        buttonNext.disabled = false;

        clearTimeout(timeFunction);
        timerAnswer();
    }

    function disableButtonStart() {
        let buttonStart = document.getElementById('buttonStart');
        buttonStart.disabled = true;
    }

    // koniec egzaminu
    function finalizeExam() {
        clearTimeout(timeFunction);
        clearTimeout(mainTimeFunction);
        readTimeTraffic = 0;
        readTimeCategorized = 0;
        answerTime = 0;

        let examEnd = document.getElementById('examEnd');
        examEnd.classList.remove('btn-danger');
        examEnd.classList.add('btn-success');

        disableNextButton();
        disableButtonStart();

        let examMedia = document.querySelector('.exam-media');
        let examQuestion = document.querySelector('.exam-question');
        let examAnswers = document.querySelector('.exam-answers');

        examMedia.innerHTML = "Kliknij Zakończ aby przejść do wyników";
        examQuestion.innerHTML = "Na pewno poszło dobrze :)";
        examQuestion.classList.add('d-flex');
        examQuestion.classList.add('align-items-center');
        examQuestion.classList.add('justify-content-center');
        examAnswers.innerHTML = null;
    } 
</script>