@{
    ViewBag.Title = "Exam";
}

<main class="mb-5">
    <section class="d-flex align-items-center justify-content-between exam-top-panel mb-3">
        <div class="ml-md-5 exam-top-text">
            Kategoria: <span class="mr-3 HelloWORD" id="examCategory">@ViewBag.Category</span>
            Wartość punktowa: <span class="mr-3" id="examScore">X</span>
            Czas do końca: <span class="mr-3" id="examTime">mm:ss</span>
        </div>
        <div class="mr-md-5">
            <button class="btn btn-danger" id="examEnd">Zakończ</button>
        </div>
    </section>
    <section class="d-md-flex align-items-start justify-content-center">
        <div class="d-flex flex-column justify-content-around mr-3">
            <div class="exam-media d-flex align-items-center justify-content-center">
                <img src="~/Content/images/placeholder.jpg" alt="To pytanie nie ma obrazka" class="exam-picture">
            </div>
            <div class="exam-question my-3">
                lorem ipsum
            </div>
            <div class="exam-answers d-flex justify-content-start flex-column">
                <label class="p-2 quiz-answer d-flex align-items-center justify-content-start">
                    <input type="radio" name="exam-answer-traffic" class="d-flex align-items-center" value="TAK" id="AnswerYes">
                    TAK
                </label>
                <label class="p-2 quiz-answer d-flex align-items-center justify-content-start">
                    <input type="radio" name="exam-answer-traffic" class="d-flex align-items-center" value="NIE" id="AnswerNo">
                    NIE
                </label>
            </div>
        </div>

        <div class="d-flex flex-column exam-info-panel align-items-center justify-content-center mt-5 ml-3">
            <p class="h5">Postęp części podstawowej: <span id="trafficProgress">0</span>/20</p>
            <p class="h5">Postęp części specjalistycznej: <span id="categorizedProgress">0</span>/12</p>

            <p id="questionTimer" class="mt-5">Czas na zapoznanie się z pytaniem</p>
            <div class="loadbar d-flex justify-content-start">
                <div id="loadbarProgress"></div>
                <div id="loadbarText">XX</div>
            </div>

            <div class="d-flex mt-5">
                <button class="btn btn-warning mr-4" id="buttonStart">START</button>
                <button class="btn btn-success ml-4" id="buttonNext">DALEJ</button>
            </div>
        </div>
    </section>
</main>

<script type="text/javascript" src="~/Scripts/jquery-3.4.1.min.js"></script>

<script>
    window.onload = addAlerts;

    // alerty po kliknięciu
    function addAlerts() {
        let menu = document.getElementsByClassName('nav-item');

        for(let i = 0; i < menu.length; i++) {
            menu[i].addEventListener('click', () => { leaveAlert('Ta akcja spowoduje porzucenie egzaminu! Czy chcesz kontynuować?') });
        }

        let examEnd = document.getElementById('examEnd');
        examEnd.addEventListener('click', () => { leaveAlert('Ta akcja spowoduje zakończenie egzaminu! Czy chcesz kontynuować?') });
    }

    function leaveAlert(message) {
        if (!window.confirm(message)) {
            event.preventDefault();
        }
    }


    // zmienne z pytaniami(array) i kategorią
    let trafficQuestions;
    let categorizedQuestions;
    let category = '@ViewBag.Category';

    // zmienne do śledzenia stanu egzaminu
    let trafficQuestionCounter = 0;
    let categorizedQuestionCounter = 0;

    // tablica zapisująca odpowiedzi
    let userAnswers = [];
    let answersCount = 0;
    let questionNumber;

    // pobranie list z pytaniami i start egzaminu
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GenerateTrafficQuestions")',
            cache: false,
            dataType: "JSON",
            success: function (data) {
                initializeTrafficQuestions(data);
            }
        });

        $.ajax({
            url: '@Url.Action("GenerateCategorizedQuestions")',
            cache: false,
            dataType: "JSON",
            data: { category: category },
            success: function (data) {
                initializeCategorizedQuestions(data);
            }
        });

        setTimeout(() => { startExam(); }, 2000);

        return false;
    });

    // załadowanie listy z pytaniami ogólnymi
    function initializeTrafficQuestions(data) {
        trafficQuestions = data;
    }

    // załadowanie listy z pytaniami specjalnymi
    function initializeCategorizedQuestions(data) {
        categorizedQuestions = data;
    }

    function startExam() {
        addNextButtonListener();
        nextStage();
    }

    // sprawdzenie które pytanie ładujemy
    function nextStage() {
        if (trafficQuestionCounter == 20) {
            changeAnswersButtons();
        }

        if (trafficQuestionCounter < 20) {
            loadQuestion(trafficQuestions[trafficQuestionCounter], false);
            trafficQuestionCounter += 1;

            let trafficProgress = document.getElementById('trafficProgress');
            trafficProgress.innerText = trafficQuestionCounter;
        }
        else {
            let categorizedProgress = document.getElementById('categorizedProgress');
            categorizedProgress.innerText = categorizedQuestionCounter + 1;

            loadQuestion(categorizedQuestions[categorizedQuestionCounter], true);
            categorizedQuestionCounter += 1;
        }
    }

    // załadowanie pytania (pierwszego lub kolejnego)
    function loadQuestion(data, categorized) {
        questionNumber = data.Number;

        let question = document.querySelector('.exam-question');
        question.innerText = data.Question;

        let examScore = document.getElementById('examScore');
        examScore.innerText = data.Score;

        let examPicture = document.querySelector('.exam-picture');
        examPicture.src = data.MediaPath;

        if (categorized) {
            let answerA = document.getElementById('LabelAnswerA');
            let answerB = document.getElementById('LabelAnswerB');
            let answerC = document.getElementById('LabelAnswerC');

            answerA.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="A" id="AnswerA">' + data.AnswerA;
            answerB.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="B" id="AnswerB">' + data.AnswerB;
            answerC.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="C" id="AnswerC">' + data.AnswerC;
        }
    }

    // usunięcie odpowiedzi tak/nie i zastąpienie ich trzema polami na odpowiedzi
    function changeAnswersButtons() {
        let examAnswers = document.querySelector('.exam-answers');
        examAnswers.innerHTML = null;

        answerA = document.createElement("label");
        answerA.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerA.id = "LabelAnswerA";
        answerA.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="A" id="AnswerA">';

        answerB = document.createElement("label");
        answerB.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerB.id = "LabelAnswerB";
        answerB.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="B" id="AnswerB">';

        answerC = document.createElement("label");
        answerC.className = "p-2 quiz-answer d-flex align-items-center justify-content-start";
        answerC.id = "LabelAnswerC";
        answerC.innerHTML = '<input type="radio" name="exam-answer-categorized" class="d-flex align-items-center" value="C" id="AnswerC">';

        examAnswers.appendChild(answerA);
        examAnswers.appendChild(answerB);
        examAnswers.appendChild(answerC);
    }

    // dodanie akcji do przycisku "dalej"
    function addNextButtonListener() {
        let buttonNext = document.getElementById('buttonNext');
        buttonNext.addEventListener('click', saveAnswer);
        buttonNext.addEventListener('click', nextStage);
    }

    // zapisanie odpowiedzi po kliknięciu "dalej"
    function saveAnswer() {
        let answerYes = document.getElementById("AnswerYes");
        let answerNo = document.getElementById("AnswerNo");

        if (answerYes != null && answerNo != null) {
            if (answerYes.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: "yes" };
            }
            else if (answerNo.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: "no" };
            }
            else {
                userAnswers[answersCount] = { number: questionNumber, type: "traffic", answer: null };
            }
        }
        else {
            let answerA = document.getElementById('AnswerA');
            let answerB = document.getElementById('AnswerB');
            let answerC = document.getElementById('AnswerC');

            if (answerA.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "A" };
            }
            else if (answerB.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "B" };
            }
            else if (answerC.checked) {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: "C" };
            }
            else {
                userAnswers[answersCount] = { number: questionNumber, type: "categorized", answer: null };
            }
        }    

        answersCount += 1;
    }
</script>